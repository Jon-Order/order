name: CI/CD Pipeline

# Trigger deployment to test Render API integration
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RENDER_API_URL: https://api.render.com/v1

# Add permissions block
permissions:
  contents: read
  deployments: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Verify secrets
        run: |
          if [ -n "$GLIDE_API_TOKEN" ] && [ -n "$GLIDE_APP_ID" ] && [ -n "$GLIDE_ORDER_LINES_TABLE_NAME" ]; then
            echo "✅ All required secrets are available"
          else
            echo "❌ Some secrets are missing"
            exit 1
          fi
        env:
          GLIDE_API_TOKEN: ${{ secrets.GLIDE_API_TOKEN }}
          GLIDE_APP_ID: ${{ secrets.GLIDE_APP_ID }}
          GLIDE_ORDER_LINES_TABLE_NAME: ${{ secrets.GLIDE_ORDER_LINES_TABLE_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '24'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f migrations/002-sqlite-to-postgres.sql
        
      - name: Check for syntax errors
        run: |
          for file in $(find . -name "*.js" ! -path "./node_modules/*"); do
            node --check "$file" || exit 1
          done
          
      - name: Run tests
        run: |
          node test-config.js
          node test-analytics.js
          node test-webhook.js
          node test-adapter-debug.js
          node test-analytics-path.js
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          GLIDE_API_TOKEN: ${{ secrets.GLIDE_API_TOKEN }}
          GLIDE_APP_ID: ${{ secrets.GLIDE_APP_ID }}
          GLIDE_ORDER_LINES_TABLE_NAME: ${{ secrets.GLIDE_ORDER_LINES_TABLE_NAME }}

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Create deployment
        id: create_deployment
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: 'production',
                auto_merge: false,
                required_contexts: []
              });
              return deployment.data.id;
            } catch (error) {
              console.log('Failed to create deployment:', error.message);
              return null;
            }
            
      - name: Update deployment status (in_progress)
        if: steps.create_deployment.outputs.result != null
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: 'in_progress'
            });
            
      - name: Deploy to Render
        id: deploy
        run: |
          echo "Triggering Render deployment..."
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
          
          # Extract deploy ID and verify it
          DEPLOY_ID=$(echo $RESPONSE | jq -r '.id')
          if [ -z "$DEPLOY_ID" ] || [ "$DEPLOY_ID" = "null" ]; then
            echo "Error: Failed to get deploy ID from response"
            echo "Response was: $RESPONSE"
            exit 1
          fi
          echo "Render deploy ID: $DEPLOY_ID"
          echo "::set-output name=deploy_id::$DEPLOY_ID"
          
      - name: Wait for deploy to complete
        run: |
          DEPLOY_ID="${{ steps.deploy.outputs.deploy_id }}"
          echo "Monitoring deploy $DEPLOY_ID..."
          
          while true; do
            # Get deploy status from the specific deploy endpoint
            RESPONSE=$(curl -s \
              -H "Accept: application/json" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$DEPLOY_ID")
            
            STATUS=$(echo $RESPONSE | jq -r '.status')
            COMMIT_ID=$(echo $RESPONSE | jq -r '.commit.id')
            
            echo "Deploy status: $STATUS (commit: $COMMIT_ID)"
            
            case $STATUS in
              "live")
                echo "✅ Deploy completed successfully"
                exit 0
                ;;
              "failed"|"cancelled"|"deactivated"|"update_failed")
                echo "❌ Deploy failed or was cancelled"
                echo "Full response: $RESPONSE"
                exit 1
                ;;
              "build_in_progress"|"update_in_progress"|"created")
                echo "⏳ Deploy in progress ($STATUS), waiting 30 seconds..."
                sleep 30
                ;;
              *)
                echo "⚠️ Unknown status: $STATUS"
                echo "Full response: $RESPONSE"
                exit 1
                ;;
            esac
          done
          
      - name: Update deployment status (success)
        if: success() && steps.create_deployment.outputs.result != null
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://givemeorder.app'
            });
            
      - name: Update deployment status (failure)
        if: failure() && steps.create_deployment.outputs.result != null
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.result }},
              state: 'failure'
            }); 