name: CI/CD Pipeline

# Trigger deployment to test Render API integration
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEPLOY_LOCK_BRANCH: deploy-lock
  RENDER_API_URL: https://api.render.com/v1

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Verify secrets
        run: |
          if [ -n "$GLIDE_API_TOKEN" ] && [ -n "$GLIDE_APP_ID" ] && [ -n "$GLIDE_ORDER_LINES_TABLE_NAME" ]; then
            echo "✅ All required secrets are available"
          else
            echo "❌ Some secrets are missing"
            exit 1
          fi
        env:
          GLIDE_API_TOKEN: ${{ secrets.GLIDE_API_TOKEN }}
          GLIDE_APP_ID: ${{ secrets.GLIDE_APP_ID }}
          GLIDE_ORDER_LINES_TABLE_NAME: ${{ secrets.GLIDE_ORDER_LINES_TABLE_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '24'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f migrations/002-sqlite-to-postgres.sql
        
      - name: Check for syntax errors
        run: |
          for file in $(find . -name "*.js" ! -path "./node_modules/*"); do
            node --check "$file" || exit 1
          done
          
      - name: Run tests
        run: |
          node test-config.js
          node test-analytics.js
          node test-webhook.js
          node test-adapter-debug.js
          node test-analytics-path.js
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          GLIDE_API_TOKEN: ${{ secrets.GLIDE_API_TOKEN }}
          GLIDE_APP_ID: ${{ secrets.GLIDE_APP_ID }}
          GLIDE_ORDER_LINES_TABLE_NAME: ${{ secrets.GLIDE_ORDER_LINES_TABLE_NAME }}

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Wait for previous deploys
        run: |
          # Function to check if deploy is in progress
          check_deploy_status() {
            # Get deployment status from Render API
            STATUS=$(curl -s \
              -H "Accept: application/json" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_SERVICE_ID }}" \
              | jq -r '.state')
            
            if [ "$STATUS" = "live" ]; then
              return 0  # No deploy in progress
            else
              return 1  # Deploy in progress
            fi
          }
          
          # Wait for any existing deploy to complete
          echo "Checking for existing deployments..."
          while ! check_deploy_status; do
            echo "Deploy in progress, waiting 30 seconds..."
            sleep 30
          done
          echo "No active deploys found, proceeding..."
          
      - name: Create deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;
            
      - name: Update deployment status (in_progress)
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress'
            });
            
      - name: Deploy to Render
        id: deploy
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
          DEPLOY_ID=$(echo $RESPONSE | jq -r '.id')
          echo "::set-output name=deploy_id::$DEPLOY_ID"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
          
      - name: Wait for deploy to complete
        run: |
          # Function to check deploy status
          check_deploy() {
            STATUS=$(curl -s \
              -H "Accept: application/json" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/${{ steps.deploy.outputs.deploy_id }}" \
              | jq -r '.status')
            
            echo "Current status: $STATUS"
            if [ "$STATUS" = "live" ]; then
              return 0
            elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "cancelled" ]; then
              echo "Deploy failed or was cancelled"
              return 2
            else
              return 1
            fi
          }
          
          # Wait for deploy to complete
          echo "Waiting for deploy to complete..."
          while true; do
            if check_deploy; then
              echo "Deploy completed successfully"
              exit 0
            elif [ $? -eq 2 ]; then
              echo "Deploy failed"
              exit 1
            else
              echo "Deploy in progress, waiting 30 seconds..."
              sleep 30
            fi
          done
          
      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://givemeorder.app'
            });
            
      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure'
            }); 